apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-schema-registry
  labels:
    app: local-schema-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-schema-registry
  template:
    metadata:
      labels:
        app: local-schema-registry
    spec:
      serviceAccountName: local-schema-registry
      containers:
        - name: local-schema-registry
          image: confluentinc/cp-schema-registry:5.3.1
          command: [ "bash", "-c"]
          args:
            - |
              cp /schema_registry_config/schema-registry.properties /etc/schema-registry/schema-registry.properties
              schema-registry-start /etc/schema-registry/schema-registry.properties
          ports:
            - containerPort: 8081
              name: client
            - containerPort: 8082
              name: tls-client
          env:
            - name: SCHEMA_REGISTRY_DEBUG
              value: "true"
          readinessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - name: certs
              mountPath: /etc/schema-registry/secrets
            - name: config-volume
              mountPath: /schema_registry_config/
      initContainers:
        - name: fetch-certs
          image: nathanmyles/vault-client:1.0.0
          command: ["/bin/sh"]
          args:
            - -ec
            - |
              curl http://local-vault.default/ca_cert.crt > /ca_cert.crt
              export VAULT_CACERT="/ca_cert.crt"
              export VAULT_ADDR="https://local-vault.default:8200"
              export VAULT_FORMAT="json"
              vault write auth/kubernetes/login \
                role=local-schema-registry \
                jwt=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) > /tmp/login.json
              vault login $(cat /tmp/login.json | jq -r .auth.client_token) > /dev/null 2>&1
              vault write pki/issue/schema-registry-default \
                common_name=${HOSTNAME}.local-schema-registry.default \
                alt_names=local-schema-registry.default > /certs/certs.json
              cat /certs/certs.json | jq -r .data.certificate > /certs/certificate.pem
              cat /certs/certs.json | jq -r .data.issuing_ca > /certs/issuing_ca.pem
              cat /certs/certs.json | jq -r .data.private_key > /certs/private_key.pem
          volumeMounts:
            - name: certs
              mountPath: "/certs"
        - name: format-certs
          image: openjdk:8-jre-stretch
          command: ["/bin/sh"]
          args:
            - -ec
            - |
              openssl pkcs12 -export -out /certs/private_key.pkcs12 -in /certs/certificate.pem -inkey /certs/private_key.pem -passin pass: -passout pass:abcdef
              keytool -genkey -keyalg RSA -alias endeca -keystore /certs/schema-registry.server.truststore.jks -storepass abcdef <<EOF
              Unknown
              Unknown
              Unknown
              Unknown
              Unknown
              Unknown
              yes
              yes
              EOF
              keytool -delete -alias endeca -keystore /certs/schema-registry.server.truststore.jks -storepass abcdef
              keytool -import -v -trustcacerts -alias endeca-ca -file /certs/issuing_ca.pem -keystore /certs/schema-registry.server.truststore.jks -storepass abcdef <<EOF
              yes
              EOF
              keytool -genkey -keyalg RSA -alias endeca -keystore /certs/schema-registry.server.keystore.jks -storepass abcdef<<EOF
              Unknown
              Unknown
              Unknown
              Unknown
              Unknown
              Unknown
              yes
              yes
              EOF
              keytool -delete -alias endeca -keystore /certs/schema-registry.server.keystore.jks -storepass abcdef
              keytool -v -importkeystore -srckeystore /certs/private_key.pkcs12 -srcstoretype PKCS12 -destkeystore /certs/schema-registry.server.keystore.jks -deststoretype JKS -storepass abcdef --srcstorepass abcdef <<EOF
              yes
              EOF
          volumeMounts:
            - name: certs
              mountPath: "/certs"
      volumes:
        - name: certs
          emptyDir: {}
        - name: config-volume
          configMap:
            name: schema-registry-config
